export {}
// describe('idmp', () => {
//   beforeEach(() => {
//     vi.useFakeTimers()
//     idmp.flushAll()
//   })
//   afterEach(() => {
//     vi.useRealTimers()
//     idmp.flushAll()
//   })
// it('respects maxAge cache TTL and refires after expiry', async () => {
//   const spy = vi.fn().mockImplementation(
//     () =>
//       new Promise<string>((resolve) => {
//         setTimeout(() => resolve('ok'), 5)
//       }),
//   )
//   const p1 = idmp('ttl-key', spy, { maxAge: 50 })
//   vi.advanceTimersByTime(5)
//   await expect(p1).resolves.toBe('ok')
//   expect(spy).toHaveBeenCalledTimes(1)
//   const p2 = idmp('ttl-key', spy, { maxAge: 50 })
//   await expect(p2).resolves.toBe('ok')
//   expect(spy).toHaveBeenCalledTimes(1)
//   vi.advanceTimersByTime(51)
//   const p3 = idmp('ttl-key', spy, { maxAge: 50 })
//   vi.advanceTimersByTime(5)
//   await expect(p3).resolves.toBe('ok')
//   expect(spy).toHaveBeenCalledTimes(2)
// })
// it('retries with exponential backoff and calls onBeforeRetry appropriately', async () => {
//   let calls = 0
//   const spy = vi.fn().mockImplementation(() => {
//     calls++
//     return calls < 3
//       ? Promise.reject(new Error('boom'))
//       : Promise.resolve('done')
//   })
//   const onBeforeRetry = vi.fn()
//   const p = idmp('retry-key', spy, {
//     maxRetry: 5,
//     minRetryDelay: 50,
//     maxRetryDelay: 5000,
//     onBeforeRetry,
//   })
//   await Promise.resolve()
//   expect(onBeforeRetry).toHaveBeenCalledTimes(1)
//   expect(onBeforeRetry).toHaveBeenLastCalledWith(
//     expect.any(Error),
//     expect.objectContaining({ globalKey: 'retry-key', retryCount: 1 }),
//   )
//   vi.advanceTimersByTime(50)
//   await Promise.resolve()
//   //
//   expect(onBeforeRetry).toHaveBeenCalledTimes(2)
//   expect(onBeforeRetry).toHaveBeenLastCalledWith(
//     expect.any(Error),
//     expect.objectContaining({ globalKey: 'retry-key', retryCount: 2 }),
//   )
//   vi.advanceTimersByTime(100)
//   await expect(p).resolves.toBe('done')
//   expect(spy).toHaveBeenCalledTimes(3)
// })
// })
